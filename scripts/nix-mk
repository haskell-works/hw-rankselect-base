#!/usr/bin/env bash

repo_name="$(basename `git rev-parse --show-toplevel`)"
ghc_attr_namever="ghc7103"

nix-env -i cabal2nix

cabal update

cabal2nix . > "$repo_name".nix

cat > default.nix <<EOF
{ nixpkgs ? import <nixpkgs> {}, compiler ? "$ghc_attr_namever" }:
nixpkgs.pkgs.haskell.packages.\${compiler}.callPackage ./$repo_name.nix { }
EOF

cat > shell.nix <<EOF
{ nixpkgs ? import <nixpkgs> {}, compiler ? "$ghc_attr_namever" }:
(import ./default.nix { inherit nixpkgs compiler; }).env
EOF

if [ "$CI" == "true" ]; then
  config_nix=~/.nixpkgs/config.nix
else
  config_nix=~/.nixpkgs/config.nix.gen
fi

if [ -f packages.list ]; then
  mkdir -p ~/.nixpkgs
  rm -f package_config.nix.part
  touch package_config.nix.part

  for package in $(cat packages.list | grep -v "^$repo_name\$"); do
    cabal2nix cabal://$package > $package.nix
    package_version="$(cat $package.nix | grep '^ *version *=' | head -n 1 | cut -d = -f 2 | cut -d '"' -f 2)"
    mv $package.nix ~/.nixpkgs/$package-$package_version.nix
    echo "            $package = self.callPackage ./$package-$package_version.nix {};" >> package_config.nix.part
    echo "            # $package = self.callPackage ~/wrk/haskell-works/hw-all/$package {};" >> package_config.nix.part
  done

  cat > "$config_nix" <<EOF
{
  packageOverrides = super: let self = super.pkgs; in
  {
    haskell = super.haskell // {
      packages = super.haskell.packages // {
        $ghc_attr_namever = super.haskell.packages.$ghc_attr_namever.override {
          overrides = self: super: {
  $(cat package_config.nix.part)
          };
        };
      };
    };
  };
}
EOF
fi
